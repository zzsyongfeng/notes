1.arguments	函数内部支持  指向当前调用者的所有参数。常用于判断传入参数的个数

2.rest参数
	function foo(a, b, ...rest) {
		console.log('a = ' + a);
		console.log('b = ' + b);
		console.log(rest);
	}
	
3.变量提升  在函数体可以后声明变量  但是后声明的变量赋值是取不到的

4.全局作用域	JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性

5.var和let申明的是变量	通常用全部大写的变量来表示“这是一个常量  ES6 const和let

6.解构赋值var [x, y, z] = ['hello', 'JavaScript', 'ES6'];     可以减少代码量
	var person = {
		name: '小明',
		age: 20,
		gender: 'male',
		passport: 'G-12345678',
		school: 'No.4 middle school'
	};
	var {name, age, passport} = person;
	// name, age, passport分别被赋值为对应属性:
	console.log('name = ' + name + ', age = ' + age + ', passport = ' + passport);
	6.1 交换两个变量的值
		var x=1, y=2;
		[x, y] = [y, x]
	6.2 快速获取当前页面的域名和路径
		var {hostname:domain, pathname:path} = location;
		
7.方法		绑定到对象上的函数称为方法
	var xiaoming = {
		name: '小明',
		birth: 1990,
		age: function () {
			var y = new Date().getFullYear();
			return y - this.birth;
		}
	};
	函数.apply(对象, [])	对this指向进行说明。
	
8.高阶函数 把函数当成参数传给另一个函数
	var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
	arr.map(String); // ['1', '2', '3', '4', '5', '6', '7', '8', '9']
	把Array所有数字转化为字符串
	
	'use strict';
	function pow(x) {
		return x * x;
	}
	var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
	var results = arr.map(pow); // [1, 4, 9, 16, 25, 36, 49, 64, 81]
	console.log(results);
	
9.reduce()	比方说对一个Array求和，就可以用reduce实现：
	var arr = [1, 3, 5, 7, 9];
	arr.reduce(function (x, y) {
		return x + y;
	}); // 25

10.filter()	
	var arr = ['A', '', 'B', null, undefined, 'C', '  '];
	var r = arr.filter(function (s) {
		return s && s.trim(); // 注意：IE9以下的版本没有trim()方法
	});
	去重
	r = arr.filter(function (element, index, self) {
		return self.indexOf(element) === index;
	});
	
11.sort()函数   坑  需要自定义排序规则
	11.1 对数字进行排序
		var arr = [10, 20, 1, 2];
		arr.sort(function (x, y) {
			if (x < y) {
				return -1;
			}
			if (x > y) {
				return 1;
			}
			return 0;
		});
		console.log(arr); // [1, 2, 10, 20]	倒序的话返回值互换
	11.2 忽略大小写进行排序   忽略大小写来比较两个字符串，实际上就是先把字符串都变成大写（或者都变成小写），再比较。
		var arr = ['Google', 'apple', 'Microsoft'];
		arr.sort(function (s1, s2) {
			x1 = s1.toUpperCase();
			x2 = s2.toUpperCase();
			if (x1 < x2) {
				return -1;
			}
			if (x1 > x2) {
				return 1;
			}
			return 0;
		}); // ['apple', 'Google', 'Microsoft']
	11.3 sort()方法会直接对Array进行修改，它返回的结果仍是当前Array

12.闭包   函数做为返回值

13.箭头函数（匿名函数）x穿进来的参数(x, y)
	13.1 x => {
			if (x > 0) {
				return x * x;
			}
			else {
				return - x * x;
			}
		}
	13.2 x => ({ foo: x })	对象形式
	13.3 可以修复this的作用域
		var obj = {
			birth: 1990,
			getAge: function () {
				var b = this.birth; // 1990
				var fn = () => new Date().getFullYear() - this.birth; // this指向obj对象
				return fn();
			}
		};
		obj.getAge(); // 25
		
14.generator	生成器 		  因为generator可以在执行过程中多次返回，所以它看上去就像一个可以记住执行状态的函数，
利用这一点，写一个generator就可以实现需要用面向对象才能实现的功能
	function* foo(x) {
		yield x + 1;
		yield x + 2;
		return x + 3;
	}
	
	try {
		r1 = yield ajax('http://url-1', data1);
		r2 = yield ajax('http://url-2', data2);
		r3 = yield ajax('http://url-3', data3);
		success(r3);
	}
	catch (err) {
		handle(err);
	}
	
15.标准对象
	15.1 typeof 值		获取对象的类型，返回一个字符串
	
16.包装对象 包装过的对象类型已改变object
	var n = new Number(123); // 123,生成了新的包装类型
	var b = new Boolean(true); // true,生成了新的包装类型
	var s = new String('str'); // 'str',生成了新的包装类型
	
	不要使用new Number()、new Boolean()、new String()创建包装对象；
	用parseInt()或parseFloat()来转换任意类型到number；
	用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；
	通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；
	typeof操作符可以判断出number、boolean、string、function和undefined；
	判断Array要使用Array.isArray(arr)；
	判断null请使用myVar === null；
	判断某个全局变量是否存在用typeof window.myVar === 'undefined'；
	函数内部判断某个变量是否存在用typeof myVar === 'undefined'。
	任何对象都有toString()方法   123..toString(); // '123', 注意是两个点！ (123).toString(); // '123'
	
17.Date	对象用来表示日期和时间
	var now = new Date();
	now; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)
	now.getFullYear(); // 2015, 年份
	now.getMonth(); // 5, 月份，注意月份范围是0~11，5表示六月
	now.getDate(); // 24, 表示24号
	now.getDay(); // 3, 表示星期三
	now.getHours(); // 19, 24小时制
	now.getMinutes(); // 49, 分钟
	now.getSeconds(); // 22, 秒
	now.getMilliseconds(); // 875, 毫秒数
	now.getTime(); // 1435146562875, 以number形式表示的时间戳
	
	17.1 创建指定var d = new Date('2018-05-09 17:06:08');   js月份是从0开始的
	17.2 var d = new Date(1435146562875);
		 d.toLocaleString(); // '2015/6/24 下午7:49:22'，本地时间（北京时区+8:00），显示的字符串与操作系统设定的格式有关
		 d.toUTCString(); // 'Wed, 24 Jun 2015 11:49:22 GMT'，UTC时间，与本地时间相差8小时
		 
18.RegExp 正则表达式
	18.1 创建正则表达式
		var re1 = /ABC\-001/;
		var re2 = new RegExp('ABC\\-001');
	18.2 判断正则是否匹配
		var re = /^\d{3}\-\d{3,8}$/;
		re.test('010-12345'); // true
		re.test('010-1234x'); // false
		re.test('010 12345'); // false
	18.3 切分字符串	'a b   c'.split(/\s+/); // ['a', 'b', 'c']
	18.4 分组（提取子串） exec()返回一个Array
		var re = /^(\d{3})-(\d{3,8})$/;
		re.exec('010-12345'); // ['010-12345', '010', '12345']
		re.exec('010 12345'); // null
	18.9 贪婪匹配：匹配尽可能多的字符
	18.10 全局搜索 g：表示全局匹配：var r1 = /test/g; // 等价于: var r2 = new RegExp('test', 'g');
	
19.JSON：数据交换格式   定死UTF-8	字符串必须要用""
	19.1 类型
		number：和JavaScript的number完全一致；
		boolean：就是JavaScript的true或false；
		string：就是JavaScript的string；
		null：就是JavaScript的null；
		array：就是JavaScript的Array表示方式——[]；
		object：就是JavaScript的{ ... }表示方式。
	19.2 对象序列化JSON
		JSON.stringify(xiaoming)			按缩进输出JSON.stringify(xiaoming, null, '  ');
		输出对象指定的键值JSON.stringify(xiaoming, ['name', 'skills'], '  ');
		
		对键值对进行处理（把value变成大写）
		function convert(key, value) {
			if (typeof value === 'string') {
				return value.toUpperCase();
			}
			return value;
		}
		JSON.stringify(xiaoming, convert, '  ');
		
		var xiaoming = {
			name: '小明',
			age: 14,
			gender: true,
			height: 1.65,
			grade: null,
			'middle-school': '\"W3C\" Middle School',
			skills: ['JavaScript', 'Java', 'Python', 'Lisp'],
			toJSON: function () {
				return { // 只输出name和age，并且改变了key：
					'Name': this.name,
					'Age': this.age
				};
			}
		};
		JSON.stringify(xiaoming); // '{"Name":"小明","Age":14}'
		
	19.3 JSON反序列化为对象
		JSON.parse('[1,2,3,true]'); // [1, 2, 3, true]
		JSON.parse('{"name":"小明","age":14}'); // Object {name: '小明', age: 14}
		JSON.parse('true'); // true
		JSON.parse('123.45'); // 123.45